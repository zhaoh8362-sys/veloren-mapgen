/// This example reads a .bin map file generated by Veloren,
/// deserializes it, and prints its information field by field.
/// 
/// Usage:
///   cargo run --example print_map_info --release -- path/to/map.bin
use std::env;
use std::fs::File;
use std::io::Read;
use std::path::PathBuf;

use bincode;
use veloren_world::sim::{WorldFile, WorldMap_0_7_0};
use vek::Vec2;

/// Computes and prints basic statistics (count, minimum and maximum)
/// of an altitude array.
fn print_alt_stats(alt: &[f64]) {
    if alt.is_empty() {
        println!("Altitude array is empty.");
        return;
    }
    let mut min_alt = alt[0];
    let mut max_alt = alt[0];
    for &a in alt.iter() {
        if a < min_alt {
            min_alt = a;
        }
        if a > max_alt {
            max_alt = a;
        }
    }
    println!("Altitude array length: {}", alt.len());
    println!("Altitude range: min = {}, max = {}", min_alt, max_alt);
}

fn main() {
    // Retrieve map file path from command-line arguments.
    let args: Vec<String> = env::args().collect();
    if args.len() < 2 {
        eprintln!("Usage: {} <map_file_path>", args[0]);
        std::process::exit(1);
    }
    let file_path = PathBuf::from(&args[1]);
    
    // Read the map file into a buffer.
    let mut file = File::open(&file_path).expect("Failed to open map file");
    let mut buffer = Vec::new();
    file.read_to_end(&mut buffer).expect("Failed to read map file");

    // Deserialize the world file.
    let world_file: WorldFile = bincode::deserialize(&buffer)
        .expect("Failed to deserialize world file");

    // Print information by matching on the world file variant.
    match world_file {
        WorldFile::Veloren0_7_0(map) => {
            println!("Map variant: Veloren0_7_0");
            println!(
                "map_size_lg (exponent): {} x {}  [Actual size: {}x{}]",
                map.map_size_lg.x,
                map.map_size_lg.y,
                1 << map.map_size_lg.x,
                1 << map.map_size_lg.y
            );
            println!("continent_scale_hack: {}", map.continent_scale_hack);
            println!("Number of altitudes: {}", map.alt.len());
            println!("Number of basement values: {}", map.basement.len());
            print_alt_stats(&map.alt);
        }
        // Print a message for other variants if desired.
        _ => {
            println!("Other world file variant detected.");
        }
    }
}